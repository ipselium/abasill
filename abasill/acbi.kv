#:import SlideTransition kivy.uix.screenmanager.SlideTransition
#:import SwapTransition kivy.uix.screenmanager.SwapTransition
#:import WipeTransition kivy.uix.screenmanager.WipeTransition
#:import AnimLabel kivy.garden.animlabel.AnimLabel
#:import Factory kivy.factory.Factory
#:import np numpy

Screens:
    Home:
    MicrophonePanel:
    SinePanel:
    MediaPanel:
    InterferencePanel:
    SeriesPanel:
    OlaPanel:

<Slider@Slider>:
    orientation: "horizontal"
    cursor_size: (20, 20)

<Spinner@Spinner>:
    size_hint: [1, .1]
    sync_height: True

<Button@Button>:
    bold: True
    font_name: app.btn_font
    font_size: app.btn_fsize
    background_color: app.btn_bg
    border: (16, 16, 16, 16)

<Graph@Graph>:
    y_grid_label: True
    x_grid_label: True
    x_grid: True
    y_grid: True

<Label@Label>:
    markup: True
    font_name: app.txt_font
    font_size: app.txt_fsize

<Title@Label>:
    canvas.before:
        Color:
            rgba: app.title_bcolor
        Rectangle:
            pos: self.pos
            size: self.size

<AnimTitle@AnimLabel>:
    transform: 'pop_in'
    letter_duration: 2
    letter_offset: .1
    font_name: app.title_font
    font_size: app.title_fsize
    color: [0, 0, 0, 0]
    on_touch_down: self.animate()
    canvas.before:
        Color:
            rgba: app.title_bcolor
        Rectangle:
            pos: self.pos
            size: self.size

<FloatInput@FloatInput>:
    multiline: False
    size_hint_x: None
    size_hint_y: None
    width: 60
    height: 30


<MicrophonePanel>:
    name: "micro"
    on_enter:
        app.get_level.resume()
        root.start()
    canvas.before:
        Rectangle:
            pos: self.pos
            size: self.size
            source: 'data/micro.jpg'

    BoxLayout:
        orientation: "vertical"
        Title:
            size_hint: [1, .1]
            text: "Microphone Panel"
        BoxLayout:
            size_hint: [1, .8]
            padding: [10, 10]
            Graph:
                id: graph
                xlabel: ""
                ylabel: ""
                x_ticks_major: 25
                y_ticks_major: 100
                ymin: 0
                ymax: 500
        Button:
            size_hint: [1, .1]
            text: "Home"
            on_press:
                root.stop()
                app.get_level.pause()
                root.manager.transition = SwapTransition()
                root.manager.transition.direction = 'up'
                root.manager.transition.duration = app.transition_time
                root.manager.current = 'home'

<SinePanel>:
    name: "sine"
    on_enter: root.start()
    canvas.before:
        Rectangle:
            pos: self.pos
            size: self.size
            source: 'data/home_r.jpg'

    BoxLayout:
        orientation: "vertical"
        Spinner:
            id: preset
            values: root.presets
            text: root.presets[0]
            on_text: root.switch_preset()
        BoxLayout:
            size_hint: [1, .8]
            padding: [10, 10]
            Graph:
                id: graph
                xlabel: "Time"
                ylabel: "Amplitude"
                x_ticks_minor: 5
                x_ticks_major: 25
                y_ticks_major: 0.25
                xmin: 0
                xmax: 1
                ymin: -2
                ymax: 2
            BoxLayout:
                padding: [10, 0]
                orientation: "vertical"
                BoxLayout:
                    size_hint: [1, .1]
                    padding: [10, 5]
                    Label:
                        text: "Sine 1"
                        color: [1, .65, 0, 1]
                    CheckBox:
                        id: disp1
                        active: True
                        size_hint_x: None
                        width: 10
                GridLayout:
                    cols: 3
                    size_hint: [1, .25]
                    row_default_height: 40
                    row_force_default: True
                    Label:
                        text: "Freq."
                    Slider:
                        range: (1, 100)
                        step: 1
                        value: root.f1
                        on_value: root.f1 = self.value
                    Label:
                        text: str(root.f1)
                    Label:
                        text: "Amp."
                    Slider:
                        range: (0, 1)
                        step: 0.1
                        value: root.A1
                        on_value: root.A1 = self.value
                    Label:
                        text: str(round(root.A1, 1))
                    Label:
                        text: "Phase"
                    Slider:
                        range: (0, 2*np.pi)
                        step: 0.01
                        value: root.t1
                        on_value: root.t1 = self.value
                    Label:
                        text: str(round(root.t1, 2))
                Spinner:
                    id: operator
                    values: root.operators
                    text: root.operators[0]
                    size_hint_y: None
                    height: 40
                BoxLayout:
                    size_hint: [1, .1]
                    padding: [10, 5]
                    Label:
                        text: "Sine 2"
                        color: [1, .65, 0, 1]
                    CheckBox:
                        id: disp2
                        active: True
                        size_hint_x: None
                        width: 10
                GridLayout:
                    cols: 3
                    size_hint: [1, .25]
                    row_default_height: 40
                    row_force_default: True
                    Label:
                        text: "Freq."
                    Slider:
                        size_hint_x: .8
                        range: (1, 100)
                        step: 1
                        value: root.f2
                        on_value: root.f2 = self.value
                    Label:
                        text: str(root.f2)
                    Label:
                        text: "Amp."
                    Slider:
                        range: (0, 1)
                        step: 0.01
                        value: root.A2
                        on_value: root.A2 = self.value
                    Label:
                        text: str(round(root.A2, 1))
                    Label:
                        text: "Phase"
                    Slider:
                        range: (0, 2*np.pi)
                        step: 0.01
                        value: root.t2
                        on_value: root.t2 = self.value
                    Label:
                        text: str(round(root.t2, 2))
        Button:
            size_hint: [1, .1]
            text: "Home"
            on_press:
                root.stop()
                root.manager.transition = SlideTransition()
                root.manager.transition.direction = 'left'
                root.manager.transition.duration = app.transition_time
                root.manager.current = 'home'

<MediaPanel>:
    name: "media"
    on_enter: root.start()
    BoxLayout:
        orientation: "vertical"
        Spinner:
            id: preset
            values: root.presets
            text: root.presets[0]
            on_text: root.switch_preset()
        BoxLayout:
            size_hint: [1, .45]
            padding: [10, 10]
            Graph:
                id: graph
                xlabel: "Space"
                ylabel: "Amplitude"
                x_ticks_major: 1
                y_ticks_major: 1
                ymin: -2
                ymax: 2
                xmin: -2
                xmax: 2
        GridLayout:
            size_hint: [1., .15]
            padding: [0, 0, 50, 0]
            cols: 6
            row_default_height: 40
            row_force_default: True
            Label:
                text: "p[sub]1[/sub]"
            Slider:
                range: (root.rho_min, root.rho_max)
                step: 0.1
                value: root.rho1
                on_value: root.rho1 = self.value
            FloatInput:
                text: str(round(root.rho1, 1))
                on_text_validate: root.rho1 = round(float(self.text)) if root.rho_min <= float(self.text) <= root.rho_max else root.rho_min

            Label:
                text: "p[sub]2[/sub]"
            Slider:
                range: (root.rho_min, root.rho_max)
                step: 0.1
                value: root.rho2
                on_value: root.rho2 = self.value
            FloatInput:
                text: str(round(root.rho2, 1))
                on_text_validate: root.rho2 = round(float(self.text)) if root.rho_min <= float(self.text) <= root.rho_max else root.rho_min

            Label:
                text: "c[sub]1[/sub]"
            Slider:
                range: (root.c_min, root.c_max)
                step: 1
                value: root.c1
                on_value: root.c1 = self.value
            FloatInput:
                text: str(round(root.c1, 1))
                on_text_validate: root.c1 = round(float(self.text)) if root.c_min <= float(self.text) <= root.c_max else root.c_min

            Label:
                text: "c[sub]2[/sub]"
            Slider:
                range: (root.c_min, root.c_max)
                step: 1
                value: root.c2
                on_value: root.c2 = self.value
            FloatInput:
                text: str(round(root.c2, 1))
                on_text_validate: root.c2 = round(float(self.text)) if root.c_min <= float(self.text) <= root.c_max else root.c_min

        BoxLayout:
            size_hint: [1, .15]
            Label:
                text: 'R[sub]p[/sub] => ' + str(round(root.Rp, 2))
                color: [1, 0, 0, 1]
            Label:
                text: 'T[sub]p[/sub] => ' + str(round(root.Tp, 2))
                color: [1, 0, 0, 1]


        Button:
            size_hint: [1, .1]
            text: "Home"
            on_press:
                root.stop()
                root.manager.transition = SlideTransition()
                root.manager.transition.direction = 'down'
                root.manager.transition.duration = app.transition_time
                root.manager.current = 'home'


<InterferencePanel>:
    name: "interference"
    on_enter: root.start()
    canvas.before:
        Rectangle:
            pos: self.pos
            size: self.size
            source: 'data/home_r.jpg'

    BoxLayout:
        orientation: "vertical"
        Spinner:
            id: preset
            values: root.presets
            text: root.presets[0]
            on_text: root.switch_preset()
        BoxLayout:
            size_hint: [1, .80]
            padding: [10, 10]
            Graph:
                id: graph
                xlabel: "Space"
                ylabel: "Amplitude"
                x_ticks_major: 0.25
                y_ticks_major: 1
                ymin: -2
                ymax: 2
                xmin: 0
                xmax: 1
            BoxLayout:
                orientation: "vertical"
                Label:
                    text: 'p(x, t) = Ae[sup]jwt[/sup] + Be[sup]-jwt[/sup]'
                GridLayout:
                    cols: 3
                    padding: [50, 10]
                    row_default_height: 40
                    row_force_default: True
                    Label:
                        size_hint_x: None
                        width: 50
                        text: "A"
                        color: [1., 0.65, 0., 1]
                    Slider:
                        range: (0, 1)
                        step: 0.01
                        value: root.A
                        on_value: root.A = self.value
                    CheckBox:
                        id: dispA
                        size_hint_x: None
                        width: 10
                    Label:
                        size_hint_x: None
                        width: 50
                        text: "B"
                        color: [1., 1., 0., 1]
                    Slider:
                        range: (0, 1)
                        step: 0.01
                        value: root.B
                        on_value: root.B = self.value
                    CheckBox:
                        id: dispB
                        size_hint_x: None
                        width: 10
        Button:
            size_hint: [1, .1]
            text: "Home"
            on_press:
                root.stop()
                root.manager.transition = SlideTransition()
                root.manager.transition.direction = 'right'
                root.manager.transition.duration = app.transition_time
                root.manager.current = 'home'

<SeriesPanel>:
    name: "series"
    on_enter: root.start()
    canvas.before:
        Rectangle:
            pos: self.pos
            size: self.size
            source: 'data/home_r.jpg'
    BoxLayout:
        orientation: "vertical"
        Spinner:
            id: preset
            values: root.presets
            text: root.presets[0]
            on_text: root.switch_preset()
        BoxLayout:
            orientation: 'vertical'
            size_hint: [1, .8]
            padding: [10, 10]
            Graph:
                id: graph
                xlabel: "Space"
                ylabel: "Amplitude"
                x_ticks_major: 1
                y_ticks_major: 1
                ymin: -2
                ymax: 2
                xmin: 0
                xmax: 2
            GridLayout:
                size_hint: [1, 0.1]
                cols: 3
                Label:
                    size_hint_x: None
                    width: 50
                    text: "N"
                Slider:
                    range: (1, 100)
                    step: 1
                    value: root.N
                    on_value:
                        root.N = self.value
                        root.switch_parity()
                Label:
                    size_hint_x: None
                    width: 80
                    text: str(root.N)
            GridLayout:
                size_hint: [1, .3]
                cols: 2
                Label:
                    text: 'Harmonics ?'
                Label:
                    text: 'Amplitude ?'
                Spinner:
                    id: parity
                    values: root.parity
                    text: root.parity[0]
                    on_text: root.switch_parity()
                    height: 40
                    size_hint_y: None
                TextInput:
                    multiline: False
                    text: root.f_i
                    size_hint_y: None
                    height: 40
                    on_text_validate:
                        root.f_i = self.text
                        root.check_f_i()

        Button:
            size_hint: [1, 0.1]
            text: "Home"
            on_press:
                root.stop()
                root.manager.transition = SlideTransition()
                root.manager.transition.direction = 'up'
                root.manager.transition.duration = app.transition_time
                root.manager.current = 'home'

<OlaPanel>:
    name: "ola"
    on_enter: root.start()
    canvas.before:
        Rectangle:
            pos: self.pos
            size: self.size
            source: 'data/home_r.jpg'
    BoxLayout:
        orientation: "vertical"
        Title:
            size_hint: [1, .1]
            text: "Ola"
        BoxLayout:
            size_hint: [1, .80]
            padding: [10, 10]
            Graph:
                id: graph
                xlabel: "Space"
                ylabel: "Amplitude"
                x_ticks_major: 0.25
                y_ticks_major: 1
                ymin: -2
                ymax: 2
                xmin: 0
                xmax: 1
            BoxLayout:
                orientation: "vertical"
                Label:
                    text: 'p(x, t) = Ae[sup]jwt[/sup] + Be[sup]-jwt[/sup]'
                GridLayout:
                    cols: 2
                    padding: [50, 10]
                    row_default_height: 40
                    row_force_default: True
                    Label:
                        size_hint_x: None
                        width: 50
                        text: "A"
                    Slider:
                        range: (0, 1)
                        step: 0.01
                        value: root.A
                        on_value: root.A = self.value
                    Label:
                        size_hint_x: None
                        width: 50
                        text: "B"
                    Slider:
                        range: (0, 1)
                        step: 0.01
                        value: root.B
                        on_value: root.B = self.value
        Button:
            size_hint: [1, 0.1]
            text: "Home"
            on_press:
                root.stop()
                root.manager.transition = SlideTransition()
                root.manager.transition.direction = 'up'
                root.manager.transition.duration = app.transition_time
                root.manager.current = 'home'

<Home>:
    name: "home"
    on_enter:
        tlabel.animate()
        blabel.animate()
    canvas.before:
        Rectangle:
            pos: self.pos
            size: self.size
            source: 'data/home.jpg'
    BoxLayout:
        orientation: "vertical"
        AnimTitle:
            id: tlabel
            target_text: 'Acoustic Basics'
            size_hint: [1, .1]
        GridLayout:
            size_hint: [0.6, 0.8]
            row_default_height: 80
            row_force_default: True
            pos_hint: {'center_x':.5, 'center_y':.5}
            padding: [80, 80, 50, 50]
            cols: 3
            # 1st line
            Button:
                text: "Ola"
                on_press:
                    root.manager.transition = SlideTransition()
                    root.manager.transition.direction = 'down'
                    root.manager.transition.duration = app.transition_time
                    root.manager.current = 'ola'
            Button:
                text: "Series"
                on_press:
                    root.manager.transition = SlideTransition()
                    root.manager.transition.direction = 'down'
                    root.manager.transition.duration = app.transition_time
                    root.manager.current = 'series'
            Button:
                text: "Micro"
                on_press:
                    root.manager.transition = SwapTransition()
                    root.manager.transition.direction = 'down'
                    root.manager.transition.duration = app.transition_time
                    root.manager.current = 'micro'

            # 2nd line
            Button:
                text: "Sine"
                on_press:
                    root.manager.transition = SlideTransition()
                    root.manager.transition.direction = 'right'
                    root.manager.transition.duration = app.transition_time
                    root.manager.current = 'sine'
            Button:
                text: "Quit"
                color: [0., 0.29, 0.49, 1]
                background_color: [0, 0, 0, 1]
                on_release: app.close_menu()
            Button:
                text: "Interf."
                on_press:
                    root.manager.transition = SlideTransition()
                    root.manager.transition.direction = 'left'
                    root.manager.transition.duration = app.transition_time
                    root.manager.current = 'interference'

            # 3rd line
            Label:
            Button:
                text: "Media"
                on_press:
                    root.manager.transition = SlideTransition()
                    root.manager.transition.direction = 'up'
                    root.manager.transition.duration = app.transition_time
                    root.manager.current = 'media'
            Label:
        AnimTitle:
            size_hint: [1, .1]
            id: blabel
            font_size: app.txt_fsize
            target_text: '#Illustrations'
